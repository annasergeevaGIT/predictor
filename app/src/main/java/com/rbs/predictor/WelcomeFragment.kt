package com.rbs.predictor.ui.welcome // Your UI welcome package name

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.navigation.fragment.findNavController // KTX extension for finding NavController
import com.rbs.predictor.databinding.FragmentWelcomeBinding // Generated View Binding class
// The WelcomeFragmentDirections class is automatically generated by Safe Args

// Fragment for the welcome screen
class WelcomeFragment : Fragment() {

    // View Binding
    private var _binding: FragmentWelcomeBinding? = null
    private val binding get() = _binding!!

    // Called to create the view hierarchy
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout using View Binding
        _binding = FragmentWelcomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    // Called after the view is created
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Set click listener for the "Go to Prediction" button
        binding.buttonGoToPrediction.setOnClickListener {
            // Navigate to the PredictionFragment using the action generated by Safe Args
            // WelcomeFragmentDirections.actionWelcomeFragmentToPredictionFragment() is generated
            findNavController().navigate(WelcomeFragmentDirections.actionWelcomeFragmentToPredictionFragment())
        }

        // Set click listener for the "Settings" button
        binding.buttonGoToSettings.setOnClickListener {
            // Navigate to the SettingsFragment using the action generated by Safe Args
            // WelcomeFragmentDirections.actionWelcomeFragmentToSettingsFragment() is generated
            findNavController().navigate(WelcomeFragmentDirections.actionWelcomeFragmentToSettingsFragment())
        }
    }

    // Called when the view is destroyed
    override fun onDestroyView() {
        super.onDestroyView()
        // Clean up the binding reference
        _binding = null
    }
}
